From f10c9ca963ee3f4acc60c29afe06657ef9c5946a Mon Sep 17 00:00:00 2001
From: Jai <jai.singh@guavus.com>
Date: Tue, 10 Jan 2012 17:03:04 +0530
Subject: [PATCH 1/5] HBASE-5166 Added MultithreadedTableMapper

---
 .../hbase/mapreduce/MultithreadedTableMapper.java  |  265 ++++++++++++++++++++
 1 files changed, 265 insertions(+), 0 deletions(-)
 create mode 100644 src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java

diff --git a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
new file mode 100644
index 0000000..e37ab4a
--- /dev/null
+++ b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
@@ -0,0 +1,265 @@
+/**
+ * Copyright 2007 The Apache Software Foundation
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.mapreduce;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.client.Result;
+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
+import org.apache.hadoop.mapreduce.Counter;
+import org.apache.hadoop.mapreduce.InputSplit;
+import org.apache.hadoop.mapreduce.Job;
+import org.apache.hadoop.mapreduce.JobContext;
+import org.apache.hadoop.mapreduce.Mapper;
+import org.apache.hadoop.mapreduce.RecordReader;
+import org.apache.hadoop.mapreduce.RecordWriter;
+import org.apache.hadoop.mapreduce.StatusReporter;
+import org.apache.hadoop.mapreduce.TaskAttemptContext;
+import org.apache.hadoop.util.ReflectionUtils;
+
+
+/**
+ * Multithreaded implementation for @link org.apache.hbase.mapreduce.TableMapper
+ * <p>
+ * It can be used instead when the Map operation is not CPU
+ * bound in order to improve throughput.
+ * <p>
+ * Mapper implementations using this MapRunnable must be thread-safe.
+ * <p>
+ * The Map-Reduce job has to be configured with the mapper to use via 
+ * {@link #setMapperClass(Configuration, Class)} and
+ * the number of thread the thread-pool can use with the
+ * {@link #getNumberOfThreads(Configuration) method. The default
+ * value is 10 threads.
+ * <p>
+ */
+
+public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
+
+	private static final Log LOG = LogFactory.getLog(MultithreadedTableMapper.class);
+	private Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> mapClass;
+	private Context outer;
+	private List<MapRunner> runners;
+
+	/**
+	 * The number of threads in the thread pool that will run the map function.
+	 * @param job the job
+	 * @return the number of threads
+	 */
+	public static int getNumberOfThreads(JobContext job) {
+		return job.getConfiguration().
+				getInt("mapred.map.multithreadedrunner.threads", 10);
+	}
+
+	/**
+	 * Set the number of threads in the pool for running maps.
+	 * @param job the job to modify
+	 * @param threads the new number of threads
+	 */
+	public static void setNumberOfThreads(Job job, int threads) {
+		job.getConfiguration().setInt("mapred.map.multithreadedrunner.threads", 
+				threads);
+	}
+
+	/**
+	 * Get the application's mapper class.
+	 * @param <K2> the map's output key type
+	 * @param <V2> the map's output value type
+	 * @param job the job
+	 * @return the mapper class to run
+	 */
+	@SuppressWarnings("unchecked")
+	public static <K2,V2>
+	Class<Mapper<ImmutableBytesWritable, Result,K2,V2>> getMapperClass(JobContext job) {
+		return (Class<Mapper<ImmutableBytesWritable, Result,K2,V2>>) 
+				job.getConfiguration().getClass("mapred.map.multithreadedrunner.class",
+						Mapper.class);
+	}
+
+	/**
+	 * Set the application's mapper class.
+	 * @param <K2> the map output key type
+	 * @param <V2> the map output value type
+	 * @param job the job to modify
+	 * @param cls the class to use as the mapper
+	 */
+	public static <K2,V2> 
+	void setMapperClass(Job job, 
+			Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> cls) {
+		if (MultithreadedTableMapper.class.isAssignableFrom(cls)) {
+			throw new IllegalArgumentException("Can't have recursive " + 
+					"MultithreadedMapper instances.");
+		}
+		job.getConfiguration().setClass("mapred.map.multithreadedrunner.class",
+				cls, Mapper.class);
+	}
+
+	/**
+	 * Run the application's maps using a thread pool.
+	 */
+	@Override
+	public void run(Context context) throws IOException, InterruptedException {
+		outer = context;
+		int numberOfThreads = getNumberOfThreads(context);
+		mapClass = getMapperClass(context);
+		if (LOG.isDebugEnabled()) {
+			LOG.debug("Configuring multithread runner to use " + numberOfThreads + 
+					" threads");
+		}
+
+		runners =  new ArrayList<MapRunner>(numberOfThreads);
+		for(int i=0; i < numberOfThreads; ++i) {
+			MapRunner thread = new MapRunner(context);
+			thread.start();
+			runners.add(i, thread);
+		}
+		for(int i=0; i < numberOfThreads; ++i) {
+			MapRunner thread = runners.get(i);
+			thread.join();
+			Throwable th = thread.throwable;
+			if (th != null) {
+				if (th instanceof IOException) {
+					throw (IOException) th;
+				} else if (th instanceof InterruptedException) {
+					throw (InterruptedException) th;
+				} else {
+					throw new RuntimeException(th);
+				}
+			}
+		}
+	}
+
+	private class SubMapRecordReader extends RecordReader<ImmutableBytesWritable, Result> {
+		private ImmutableBytesWritable key;
+		private Result value;
+		private Configuration conf;
+
+		@Override
+		public void close() throws IOException {
+		}
+
+		@Override
+		public float getProgress() throws IOException, InterruptedException {
+			return 0;
+		}
+
+		@Override
+		public void initialize(InputSplit split, 
+				TaskAttemptContext context
+				) throws IOException, InterruptedException {
+			conf = context.getConfiguration();
+		}
+
+
+		@Override
+		public boolean nextKeyValue() throws IOException, InterruptedException {
+			synchronized (outer) {
+				if (!outer.nextKeyValue()) {
+					return false;
+				}
+				key = ReflectionUtils.copy(outer.getConfiguration(),
+						outer.getCurrentKey(), key);
+				value = ReflectionUtils.copy(conf, outer.getCurrentValue(), value);
+				return true;
+			}
+		}
+
+		public ImmutableBytesWritable getCurrentKey() {
+			return key;
+		}
+
+		@Override
+		public Result getCurrentValue() {
+			return value;
+		}
+	}
+
+	private class SubMapRecordWriter extends RecordWriter<K2,V2> {
+
+		@Override
+		public void close(TaskAttemptContext context) throws IOException,
+		InterruptedException {
+		}
+
+		@Override
+		public void write(K2 key, V2 value) throws IOException,
+		InterruptedException {
+			synchronized (outer) {
+				outer.write(key, value);
+			}
+		}  
+	}
+
+	private class SubMapStatusReporter extends StatusReporter {
+
+		@Override
+		public Counter getCounter(Enum<?> name) {
+			return outer.getCounter(name);
+		}
+
+		@Override
+		public Counter getCounter(String group, String name) {
+			return outer.getCounter(group, name);
+		}
+
+		@Override
+		public void progress() {
+			outer.progress();
+		}
+
+		@Override
+		public void setStatus(String status) {
+			outer.setStatus(status);
+		}
+
+	}
+
+	private class MapRunner extends Thread {
+		private Mapper<ImmutableBytesWritable, Result, K2,V2> mapper;
+		private Context subcontext;
+		private Throwable throwable;
+
+		MapRunner(Context context) throws IOException, InterruptedException {
+			mapper = ReflectionUtils.newInstance(mapClass, 
+					context.getConfiguration());
+			subcontext = new Context(outer.getConfiguration(), 
+					outer.getTaskAttemptID(),
+					new SubMapRecordReader(),
+					new SubMapRecordWriter(), 
+					context.getOutputCommitter(),
+					new SubMapStatusReporter(),
+					outer.getInputSplit());
+		}
+
+		@Override
+		public void run() {
+			try {
+				mapper.run(subcontext);
+			} catch (Throwable ie) {
+				throwable = ie;
+			}
+		}
+	}
+}
\ No newline at end of file
-- 
1.7.5.4


From e91893e6ec30055f439f93e05067f9f2271d0e3e Mon Sep 17 00:00:00 2001
From: Jai <jai.singh@guavus.com>
Date: Mon, 16 Jan 2012 22:34:47 +0530
Subject: [PATCH 2/5] Removing Apache License as suggested by stack

---
 .../hbase/mapreduce/MultithreadedTableMapper.java  |  432 ++++++++++----------
 1 files changed, 208 insertions(+), 224 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
index e37ab4a..dc09a9d 100644
--- a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
+++ b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
@@ -1,22 +1,3 @@
-/**
- * Copyright 2007 The Apache Software Foundation
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package org.apache.hadoop.hbase.mapreduce;
 
 import java.io.IOException;
@@ -57,209 +38,212 @@ import org.apache.hadoop.util.ReflectionUtils;
  */
 
 public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
-
-	private static final Log LOG = LogFactory.getLog(MultithreadedTableMapper.class);
-	private Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> mapClass;
-	private Context outer;
-	private List<MapRunner> runners;
-
-	/**
-	 * The number of threads in the thread pool that will run the map function.
-	 * @param job the job
-	 * @return the number of threads
-	 */
-	public static int getNumberOfThreads(JobContext job) {
-		return job.getConfiguration().
-				getInt("mapred.map.multithreadedrunner.threads", 10);
-	}
-
-	/**
-	 * Set the number of threads in the pool for running maps.
-	 * @param job the job to modify
-	 * @param threads the new number of threads
-	 */
-	public static void setNumberOfThreads(Job job, int threads) {
-		job.getConfiguration().setInt("mapred.map.multithreadedrunner.threads", 
-				threads);
-	}
-
-	/**
-	 * Get the application's mapper class.
-	 * @param <K2> the map's output key type
-	 * @param <V2> the map's output value type
-	 * @param job the job
-	 * @return the mapper class to run
-	 */
-	@SuppressWarnings("unchecked")
-	public static <K2,V2>
-	Class<Mapper<ImmutableBytesWritable, Result,K2,V2>> getMapperClass(JobContext job) {
-		return (Class<Mapper<ImmutableBytesWritable, Result,K2,V2>>) 
-				job.getConfiguration().getClass("mapred.map.multithreadedrunner.class",
-						Mapper.class);
-	}
-
-	/**
-	 * Set the application's mapper class.
-	 * @param <K2> the map output key type
-	 * @param <V2> the map output value type
-	 * @param job the job to modify
-	 * @param cls the class to use as the mapper
-	 */
-	public static <K2,V2> 
-	void setMapperClass(Job job, 
-			Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> cls) {
-		if (MultithreadedTableMapper.class.isAssignableFrom(cls)) {
-			throw new IllegalArgumentException("Can't have recursive " + 
-					"MultithreadedMapper instances.");
-		}
-		job.getConfiguration().setClass("mapred.map.multithreadedrunner.class",
-				cls, Mapper.class);
-	}
-
-	/**
-	 * Run the application's maps using a thread pool.
-	 */
-	@Override
-	public void run(Context context) throws IOException, InterruptedException {
-		outer = context;
-		int numberOfThreads = getNumberOfThreads(context);
-		mapClass = getMapperClass(context);
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Configuring multithread runner to use " + numberOfThreads + 
-					" threads");
-		}
-
-		runners =  new ArrayList<MapRunner>(numberOfThreads);
-		for(int i=0; i < numberOfThreads; ++i) {
-			MapRunner thread = new MapRunner(context);
-			thread.start();
-			runners.add(i, thread);
-		}
-		for(int i=0; i < numberOfThreads; ++i) {
-			MapRunner thread = runners.get(i);
-			thread.join();
-			Throwable th = thread.throwable;
-			if (th != null) {
-				if (th instanceof IOException) {
-					throw (IOException) th;
-				} else if (th instanceof InterruptedException) {
-					throw (InterruptedException) th;
-				} else {
-					throw new RuntimeException(th);
-				}
-			}
-		}
-	}
-
-	private class SubMapRecordReader extends RecordReader<ImmutableBytesWritable, Result> {
-		private ImmutableBytesWritable key;
-		private Result value;
-		private Configuration conf;
-
-		@Override
-		public void close() throws IOException {
-		}
-
-		@Override
-		public float getProgress() throws IOException, InterruptedException {
-			return 0;
-		}
-
-		@Override
-		public void initialize(InputSplit split, 
-				TaskAttemptContext context
-				) throws IOException, InterruptedException {
-			conf = context.getConfiguration();
-		}
-
-
-		@Override
-		public boolean nextKeyValue() throws IOException, InterruptedException {
-			synchronized (outer) {
-				if (!outer.nextKeyValue()) {
-					return false;
-				}
-				key = ReflectionUtils.copy(outer.getConfiguration(),
-						outer.getCurrentKey(), key);
-				value = ReflectionUtils.copy(conf, outer.getCurrentValue(), value);
-				return true;
-			}
-		}
-
-		public ImmutableBytesWritable getCurrentKey() {
-			return key;
-		}
-
-		@Override
-		public Result getCurrentValue() {
-			return value;
-		}
-	}
-
-	private class SubMapRecordWriter extends RecordWriter<K2,V2> {
-
-		@Override
-		public void close(TaskAttemptContext context) throws IOException,
-		InterruptedException {
-		}
-
-		@Override
-		public void write(K2 key, V2 value) throws IOException,
-		InterruptedException {
-			synchronized (outer) {
-				outer.write(key, value);
-			}
-		}  
-	}
-
-	private class SubMapStatusReporter extends StatusReporter {
-
-		@Override
-		public Counter getCounter(Enum<?> name) {
-			return outer.getCounter(name);
-		}
-
-		@Override
-		public Counter getCounter(String group, String name) {
-			return outer.getCounter(group, name);
-		}
-
-		@Override
-		public void progress() {
-			outer.progress();
-		}
-
-		@Override
-		public void setStatus(String status) {
-			outer.setStatus(status);
-		}
-
-	}
-
-	private class MapRunner extends Thread {
-		private Mapper<ImmutableBytesWritable, Result, K2,V2> mapper;
-		private Context subcontext;
-		private Throwable throwable;
-
-		MapRunner(Context context) throws IOException, InterruptedException {
-			mapper = ReflectionUtils.newInstance(mapClass, 
-					context.getConfiguration());
-			subcontext = new Context(outer.getConfiguration(), 
-					outer.getTaskAttemptID(),
-					new SubMapRecordReader(),
-					new SubMapRecordWriter(), 
-					context.getOutputCommitter(),
-					new SubMapStatusReporter(),
-					outer.getInputSplit());
-		}
-
-		@Override
-		public void run() {
-			try {
-				mapper.run(subcontext);
-			} catch (Throwable ie) {
-				throwable = ie;
-			}
-		}
-	}
+  
+  private static final Log LOG = LogFactory.getLog(MultithreadedTableMapper.class);
+  private Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> mapClass;
+  private Context outer;
+  private List<MapRunner> runners;
+  
+  public static final String NUMBER_OF_THREADS = "hbase.mapreduce.multithreadedrunner.threads";
+  public static final String MAPPER_CLASS = "hbase.mapreduce.multithreadedrunner.class";
+  
+  /**
+   * The number of threads in the thread pool that will run the map function.
+   * @param job the job
+   * @return the number of threads
+   */
+  public static int getNumberOfThreads(JobContext job) {
+    return job.getConfiguration().
+        getInt(NUMBER_OF_THREADS, 10);
+  }
+  
+  /**
+   * Set the number of threads in the pool for running maps.
+   * @param job the job to modify
+   * @param threads the new number of threads
+   */
+  public static void setNumberOfThreads(Job job, int threads) {
+    job.getConfiguration().setInt(NUMBER_OF_THREADS, 
+        threads);
+  }
+  
+  /**
+   * Get the application's mapper class.
+   * @param <K2> the map's output key type
+   * @param <V2> the map's output value type
+   * @param job the job
+   * @return the mapper class to run
+   */
+  @SuppressWarnings("unchecked")
+  public static <K2,V2>
+  Class<Mapper<ImmutableBytesWritable, Result,K2,V2>> getMapperClass(JobContext job) {
+    return (Class<Mapper<ImmutableBytesWritable, Result,K2,V2>>) 
+        job.getConfiguration().getClass( MAPPER_CLASS,
+            Mapper.class);
+  }
+  
+  /**
+   * Set the application's mapper class.
+   * @param <K2> the map output key type
+   * @param <V2> the map output value type
+   * @param job the job to modify
+   * @param cls the class to use as the mapper
+   */
+  public static <K2,V2> 
+  void setMapperClass(Job job, 
+      Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> cls) {
+    if (MultithreadedTableMapper.class.isAssignableFrom(cls)) {
+      throw new IllegalArgumentException("Can't have recursive " + 
+          "MultithreadedMapper instances.");
+    }
+    job.getConfiguration().setClass(MAPPER_CLASS,
+        cls, Mapper.class);
+  }
+  
+  /**
+   * Run the application's maps using a thread pool.
+   */
+  @Override
+  public void run(Context context) throws IOException, InterruptedException {
+    outer = context;
+    int numberOfThreads = getNumberOfThreads(context);
+    mapClass = getMapperClass(context);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Configuring multithread runner to use " + numberOfThreads + 
+          " threads");
+    }
+    
+    runners =  new ArrayList<MapRunner>(numberOfThreads);
+    for(int i=0; i < numberOfThreads; ++i) {
+      MapRunner thread = new MapRunner(context);
+      thread.start();
+      runners.add(i, thread);
+    }
+    for(int i=0; i < numberOfThreads; ++i) {
+      MapRunner thread = runners.get(i);
+      thread.join();
+      Throwable th = thread.throwable;
+      if (th != null) {
+        if (th instanceof IOException) {
+          throw (IOException) th;
+        } else if (th instanceof InterruptedException) {
+          throw (InterruptedException) th;
+        } else {
+          throw new RuntimeException(th);
+        }
+      }
+    }
+  }
+  
+  private class SubMapRecordReader extends RecordReader<ImmutableBytesWritable, Result> {
+    private ImmutableBytesWritable key;
+    private Result value;
+    private Configuration conf;
+    
+    @Override
+    public void close() throws IOException {
+    }
+    
+    @Override
+    public float getProgress() throws IOException, InterruptedException {
+      return 0;
+    }
+    
+    @Override
+    public void initialize(InputSplit split, 
+        TaskAttemptContext context
+        ) throws IOException, InterruptedException {
+      conf = context.getConfiguration();
+    }
+    
+    
+    @Override
+    public boolean nextKeyValue() throws IOException, InterruptedException {
+      synchronized (outer) {
+        if (!outer.nextKeyValue()) {
+          return false;
+        }
+        key = ReflectionUtils.copy(outer.getConfiguration(),
+            outer.getCurrentKey(), key);
+        value = ReflectionUtils.copy(conf, outer.getCurrentValue(), value);
+        return true;
+      }
+    }
+    
+    public ImmutableBytesWritable getCurrentKey() {
+      return key;
+    }
+    
+    @Override
+    public Result getCurrentValue() {
+      return value;
+    }
+  }
+  
+  private class SubMapRecordWriter extends RecordWriter<K2,V2> {
+    
+    @Override
+    public void close(TaskAttemptContext context) throws IOException,
+    InterruptedException {
+    }
+    
+    @Override
+    public void write(K2 key, V2 value) throws IOException,
+    InterruptedException {
+      synchronized (outer) {
+        outer.write(key, value);
+      }
+    }  
+  }
+  
+  private class SubMapStatusReporter extends StatusReporter {
+    
+    @Override
+    public Counter getCounter(Enum<?> name) {
+      return outer.getCounter(name);
+    }
+    
+    @Override
+    public Counter getCounter(String group, String name) {
+      return outer.getCounter(group, name);
+    }
+    
+    @Override
+    public void progress() {
+      outer.progress();
+    }
+    
+    @Override
+    public void setStatus(String status) {
+      outer.setStatus(status);
+    }
+    
+  }
+  
+  private class MapRunner extends Thread {
+    private Mapper<ImmutableBytesWritable, Result, K2,V2> mapper;
+    private Context subcontext;
+    private Throwable throwable;
+    
+    MapRunner(Context context) throws IOException, InterruptedException {
+      mapper = ReflectionUtils.newInstance(mapClass, 
+          context.getConfiguration());
+      subcontext = new Context(outer.getConfiguration(), 
+          outer.getTaskAttemptID(),
+          new SubMapRecordReader(),
+          new SubMapRecordWriter(), 
+          context.getOutputCommitter(),
+          new SubMapStatusReporter(),
+          outer.getInputSplit());
+    }
+    
+    @Override
+    public void run() {
+      try {
+        mapper.run(subcontext);
+      } catch (Throwable ie) {
+        throwable = ie;
+      }
+    }
+  }
 }
\ No newline at end of file
-- 
1.7.5.4


From d3933265d216551a67ac34046f6594070f49badd Mon Sep 17 00:00:00 2001
From: Jai <jai.singh@guavus.com>
Date: Tue, 17 Jan 2012 00:36:17 +0530
Subject: [PATCH 3/5] Added Executor

---
 .../hbase/mapreduce/MultithreadedTableMapper.java  |   30 ++++++--------------
 1 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
index dc09a9d..767aca9 100644
--- a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
+++ b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
@@ -1,8 +1,8 @@
 package org.apache.hadoop.hbase.mapreduce;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -42,7 +42,7 @@ public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
   private static final Log LOG = LogFactory.getLog(MultithreadedTableMapper.class);
   private Class<? extends Mapper<ImmutableBytesWritable, Result,K2,V2>> mapClass;
   private Context outer;
-  private List<MapRunner> runners;
+  private ExecutorService executor;
   
   public static final String NUMBER_OF_THREADS = "hbase.mapreduce.multithreadedrunner.threads";
   public static final String MAPPER_CLASS = "hbase.mapreduce.multithreadedrunner.class";
@@ -112,26 +112,14 @@ public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
       LOG.debug("Configuring multithread runner to use " + numberOfThreads + 
           " threads");
     }
-    
-    runners =  new ArrayList<MapRunner>(numberOfThreads);
+    executor = Executors.newFixedThreadPool(numberOfThreads);
     for(int i=0; i < numberOfThreads; ++i) {
       MapRunner thread = new MapRunner(context);
-      thread.start();
-      runners.add(i, thread);
+      executor.execute(thread);
     }
-    for(int i=0; i < numberOfThreads; ++i) {
-      MapRunner thread = runners.get(i);
-      thread.join();
-      Throwable th = thread.throwable;
-      if (th != null) {
-        if (th instanceof IOException) {
-          throw (IOException) th;
-        } else if (th instanceof InterruptedException) {
-          throw (InterruptedException) th;
-        } else {
-          throw new RuntimeException(th);
-        }
-      }
+    executor.shutdown();
+    while(!executor.isTerminated()){
+      // wait till all the threads are done
     }
   }
   
@@ -220,7 +208,7 @@ public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
     
   }
   
-  private class MapRunner extends Thread {
+  private class MapRunner implements Runnable {
     private Mapper<ImmutableBytesWritable, Result, K2,V2> mapper;
     private Context subcontext;
     private Throwable throwable;
-- 
1.7.5.4


From 8512e2ddf4cb49c7b473db19912ab566cc4fca12 Mon Sep 17 00:00:00 2001
From: Jai <jai.singh@guavus.com>
Date: Tue, 21 Feb 2012 15:01:15 +0530
Subject: [PATCH 4/5] Added testcase for MultithreadedTableMapper in
 TestTableMapReduce

---
 .../hbase/mapreduce/MultithreadedTableMapper.java  |   20 +++++++++++++
 .../hadoop/hbase/mapreduce/TestTableMapReduce.java |   29 +++++++++++++++----
 2 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
index 767aca9..26e921b 100644
--- a/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
+++ b/src/main/java/org/apache/hadoop/hbase/mapreduce/MultithreadedTableMapper.java
@@ -1,3 +1,22 @@
+/**
+ * Copyright 2009 The Apache Software Foundation
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.apache.hadoop.hbase.mapreduce;
 
 import java.io.IOException;
@@ -120,6 +139,7 @@ public class MultithreadedTableMapper<K2, V2> extends TableMapper<K2, V2> {
     executor.shutdown();
     while(!executor.isTerminated()){
       // wait till all the threads are done
+      Thread.sleep(1000);
     }
   }
   
diff --git a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
index 0b8ff30..c8fc8d1 100644
--- a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
+++ b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
@@ -55,6 +55,7 @@ public class TestTableMapReduce extends MultiRegionTable {
   static final String MULTI_REGION_TABLE_NAME = "mrtest";
   static final byte[] INPUT_FAMILY = Bytes.toBytes("contents");
   static final byte[] OUTPUT_FAMILY = Bytes.toBytes("text");
+  static final int    NUMBER_OF_THREADS = 20;
 
   /** constructor */
   public TestTableMapReduce() {
@@ -111,10 +112,12 @@ public class TestTableMapReduce extends MultiRegionTable {
    */
   public void testMultiRegionTable()
   throws IOException, InterruptedException, ClassNotFoundException {
-    runTestOnTable(new HTable(new Configuration(conf), MULTI_REGION_TABLE_NAME));
+    runTestOnTable(new HTable(new Configuration(conf), MULTI_REGION_TABLE_NAME), 1);
+    // thest multithreadedmapper case
+    runTestOnTable(new HTable(new Configuration(conf), MULTI_REGION_TABLE_NAME), NUMBER_OF_THREADS);
   }
 
-  private void runTestOnTable(HTable table)
+  private void runTestOnTable(HTable table, int numOfThreads)
   throws IOException, InterruptedException, ClassNotFoundException {
     MiniMRCluster mrCluster = new MiniMRCluster(2, fs.getUri().toString(), 1);
     Job job = null;
@@ -124,10 +127,23 @@ public class TestTableMapReduce extends MultiRegionTable {
       job.setNumReduceTasks(1);
       Scan scan = new Scan();
       scan.addFamily(INPUT_FAMILY);
-      TableMapReduceUtil.initTableMapperJob(
-        Bytes.toString(table.getTableName()), scan,
-        ProcessContentsMapper.class, ImmutableBytesWritable.class,
-        Put.class, job);
+
+      if(numOfThreads>1){
+        // test multithradedmapper
+        TableMapReduceUtil.initTableMapperJob(
+            Bytes.toString(table.getTableName()), scan,
+            MultithreadedTableMapper.class, ImmutableBytesWritable.class,
+            Put.class, job);
+          MultithreadedTableMapper.setMapperClass(job, ProcessContentsMapper.class);
+          MultithreadedTableMapper.setNumberOfThreads(job, numOfThreads);
+        
+      }else{
+        TableMapReduceUtil.initTableMapperJob(
+            Bytes.toString(table.getTableName()), scan,
+            ProcessContentsMapper.class, ImmutableBytesWritable.class,
+            Put.class, job);
+      }
+      
       TableMapReduceUtil.initTableReducerJob(
         Bytes.toString(table.getTableName()),
         IdentityTableReducer.class, job);
@@ -148,6 +164,7 @@ public class TestTableMapReduce extends MultiRegionTable {
     }
   }
 
+  
   private void verify(String tableName) throws IOException {
     HTable table = new HTable(new Configuration(conf), tableName);
     boolean verified = false;
-- 
1.7.5.4


From af17fcb5d5377bb505257a15bf871ae6c98593f4 Mon Sep 17 00:00:00 2001
From: Jai <jai.singh@guavus.com>
Date: Tue, 21 Feb 2012 15:04:15 +0530
Subject: [PATCH 5/5] Less spaces

---
 .../hadoop/hbase/mapreduce/TestTableMapReduce.java |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
index c8fc8d1..8eea297 100644
--- a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
+++ b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduce.java
@@ -163,7 +163,6 @@ public class TestTableMapReduce extends MultiRegionTable {
       }
     }
   }
-
   
   private void verify(String tableName) throws IOException {
     HTable table = new HTable(new Configuration(conf), tableName);
-- 
1.7.5.4

